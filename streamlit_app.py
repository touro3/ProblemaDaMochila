import streamlit as st
import time
import random
# Importa as fun√ß√µes e classes do seu backend
from mochila_ga import Item, algoritmo_genetico_mochila_iterativo, calcular_detalhes_individuo

st.set_page_config(layout="wide", page_title="Problema da Mochila Animado")

# --- Dados Mock de Itens (voc√™ pode expandir ou permitir entrada do usu√°rio) ---
DEFAULT_ITEMS_DATA = [
    ("Lanterna", 2, 15), ("Saco de Dormir", 5, 30), ("Comida Enlatada", 10, 50),
    ("Corda", 3, 20), ("Mapa", 1, 10), ("B√∫ssola", 1, 15),
    ("Kit Primeiros Socorros", 4, 25), ("Cantil", 2, 20), ("Faca", 1, 18),
    ("Repelente", 1, 12), ("C√¢mera", 3, 40), ("Livro", 2, 5),
    ("Barraca", 15, 70), ("Fogareiro", 6, 35), ("Panelas", 4, 22),
    ("R√°dio Solar", 3, 28), ("Bateria Extra", 2, 22), ("Chocolate", 1, 16)
]
DEFAULT_CAPACITY = 35

# --- Estilos CSS Personalizados para Anima√ß√£o e Beleza ---
st.markdown("""
<style>
    .stApp {
        background-color: #f0f2f6; /* Fundo mais suave */
    }
    .main-header {
        font-size: 3em;
        color: #2e86c1; /* Cor prim√°ria */
        text-align: center;
        margin-bottom: 30px;
        font-weight: bold;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.2);
    }
    .knapsack-container {
        display: flex;
        justify-content: center;
        align-items: flex-end;
        min-height: 250px; /* Altura m√≠nima para a mochila */
        margin-bottom: 30px;
        position: relative;
    }
    .knapsack-base {
        width: 300px;
        height: 150px;
        background-color: #8B4513; /* Marrom escuro */
        border: 5px solid #5A2D0C;
        border-radius: 10px;
        position: relative;
        overflow: hidden; /* Garante que os itens n√£o ultrapassem a borda */
        display: flex;
        flex-wrap: wrap; /* Para os itens se ajustarem */
        align-content: flex-end; /* Itens "sobem" de baixo para cima */
        padding: 10px;
        box-shadow: inset 0 0 10px rgba(0,0,0,0.5);
    }
    .knapsack-item {
        background-color: #f39c12; /* Laranja */
        color: white;
        border-radius: 5px;
        padding: 5px 10px;
        margin: 5px;
        font-size: 0.8em;
        font-weight: bold;
        text-align: center;
        opacity: 0; /* Come√ßa invis√≠vel para a anima√ß√£o */
        transform: translateY(50px); /* Come√ßa abaixo da mochila */
        transition: opacity 0.5s ease-out, transform 0.5s ease-out; /* Transi√ß√£o suave */
        box-shadow: 2px 2px 5px rgba(0,0,0,0.3);
        cursor: help; /* Para indicar que h√° mais informa√ß√µes */
        display: flex;
        align-items: center;
        justify-content: center;
        min-width: 60px; /* Largura m√≠nima para o item */
        height: 30px; /* Altura fixa para o item */
    }
    .knapsack-item.visible {
        opacity: 1;
        transform: translateY(0);
    }
    .item-card {
        background-color: #ffffff;
        border-radius: 10px;
        padding: 15px;
        margin-bottom: 15px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        transition: transform 0.2s ease-in-out;
    }
    .item-card:hover {
        transform: translateY(-5px);
    }
    .item-card h5 {
        color: #34495e;
        margin-bottom: 5px;
    }
    .item-card p {
        font-size: 0.9em;
        color: #7f8c8d;
    }
    .progress-info {
        font-size: 1.2em;
        font-weight: bold;
        color: #3498db;
        text-align: center;
        margin-top: 20px;
    }
    .stMarkdown h3 {
        color: #2c3e50;
    }
</style>
""", unsafe_allow_html=True)

st.markdown('<h1 class="main-header">üéí O Divertido Problema da Mochila com AG üß¨</h1>', unsafe_allow_html=True)

st.write("""
Este aplicativo visualiza o problema da mochila sendo resolvido por um Algoritmo Gen√©tico.
Veja como a sele√ß√£o de itens evolui ao longo das gera√ß√µes para encontrar a melhor combina√ß√£o!
""")

# --- Sidebar para Controles e Par√¢metros ---
st.sidebar.header("‚öôÔ∏è Configura√ß√µes do Algoritmo Gen√©tico")
capacidade_mochila = st.sidebar.number_input("Capacidade M√°xima da Mochila:", min_value=1, value=DEFAULT_CAPACITY, step=1)
num_items_para_gerar = st.sidebar.slider("N√∫mero de Itens (Gerados Aleatoriamente):", 5, 30, len(DEFAULT_ITEMS_DATA))

# Gerar itens aleat√≥rios ou usar os mockados
gerar_novos_itens = st.sidebar.checkbox("Gerar novos itens aleat√≥rios?", value=False)

items_data = []
if gerar_novos_itens:
    st.sidebar.subheader("Itens Aleat√≥rios Gerados:")
    for i in range(num_items_para_gerar):
        name = f"Item {i+1}"
        # Ajuste os ranges de peso e valor para serem razo√°veis
        weight = random.randint(1, 15)
        value = random.randint(10, 150)
        items_data.append((name, weight, value))
        st.sidebar.write(f"- {name}: P={weight}, V={value}")
else:
    # Limita se o slider for menor que o n√∫mero de itens default
    items_data = DEFAULT_ITEMS_DATA[:num_items_para_gerar]
    st.sidebar.subheader("Itens Pr√©-definidos:")
    for name, weight, value in items_data:
        st.sidebar.write(f"- {name}: P={weight}, V={value}")


# Par√¢metros do AG
tam_populacao = st.sidebar.slider("Tamanho da Popula√ß√£o:", 10, 200, 100)
num_geracoes = st.sidebar.slider("N√∫mero de Gera√ß√µes:", 50, 500, 150)
taxa_cruzamento = st.sidebar.slider("Taxa de Cruzamento:", 0.0, 1.0, 0.85, 0.05)
taxa_mutacao = st.sidebar.slider("Taxa de Muta√ß√£o:", 0.0, 0.1, 0.03, 0.005)
contagem_elitismo = st.sidebar.slider("Elitismo (Melhores Indiv√≠duos Preservados):", 0, 10, 3)
tam_torneio = st.sidebar.slider("Tamanho do Torneio (Sele√ß√£o):", 2, 10, 5)
seed_val = st.sidebar.number_input("Seed (para reprodutibilidade):", value=42)
animation_speed = st.sidebar.slider("Velocidade da Anima√ß√£o (segundos/gera√ß√£o):", 0.05, 1.0, 0.2, 0.05)

st.sidebar.markdown("---")
st.sidebar.info("Ajuste os par√¢metros e clique em 'Iniciar Simula√ß√£o' para ver a m√°gica acontecer!")


# --- Colunas para Layout Principal ---
col_mochila, col_status, col_graficos = st.columns([1.5, 1, 1.5])

with col_mochila:
    st.subheader("üëú Mochila Atual")
    mochila_placeholder = st.empty() # Placeholder para a mochila e seus itens
    item_details_placeholder = st.empty() # Placeholder para detalhes dos itens na mochila

with col_status:
    st.subheader("üìä Progresso do Algoritmo")
    generation_info = st.empty()
    best_value_info = st.empty()
    current_weight_info = st.empty()
    best_overall_info = st.empty()
    progress_bar_placeholder = st.empty()

with col_graficos:
    st.subheader("üìà Evolu√ß√£o do Fitness")
    chart_data_placeholder = st.empty()


# --- Bot√£o de Iniciar Simula√ß√£o ---
st.markdown("---")
if st.button("üöÄ Iniciar Simula√ß√£o"):
    st.balloons() # Anima√ß√£o de bal√µes ao iniciar

    st.write("Iniciando o Algoritmo Gen√©tico...")

    # Armazenar hist√≥rico para o gr√°fico
    historico_fitness_geral_para_grafico = []


    # Executar o algoritmo gen√©tico iterativamente
    # O algoritmo_genetico_mochila_iterativo j√° foi adaptado para retornar o hist√≥rico
    historico_solucoes = algoritmo_genetico_mochila_iterativo(
        items_data=items_data,
        capacidade_maxima=capacidade_mochila,
        tam_populacao=tam_populacao,
        num_geracoes=num_geracoes,
        taxa_mutacao=taxa_mutacao,
        taxa_cruzamento=taxa_cruzamento,
        contagem_elitismo=contagem_elitismo,
        tam_torneio=tam_torneio,
        seed=seed_val
    )

    items_obj_list = [Item(name, weight, value) for name, weight, value in items_data]


    for geracao_idx, (solucao, valor, peso, fitness) in enumerate(historico_solucoes):
        # Atualiza a barra de progresso
        progress_bar_placeholder.progress((geracao_idx + 1) / num_geracoes)

        generation_info.markdown(f"<p class='progress-info'>Gera√ß√£o: <strong>{geracao_idx + 1}/{num_geracoes}</strong></p>", unsafe_allow_html=True)
        best_value_info.markdown(f"<p class='progress-info'>Valor Atual: <strong>${valor}</strong></p>", unsafe_allow_html=True)
        current_weight_info.markdown(f"<p class='progress-info'>Peso Atual: <strong>{peso}/{capacidade_mochila} kg</strong></p>", unsafe_allow_html=True)
        best_overall_info.markdown(f"<p class='progress-info'>Melhor Valor Geral: <strong>${historico_solucoes[geracao_idx][3]}</strong></p>", unsafe_allow_html=True) # historico_solucoes[geracao_idx][3] √© o fitness acumulado

        # Visualiza√ß√£o da Mochila
        with mochila_placeholder.container():
            # Inicia o container da mochila
            st.markdown('<div class="knapsack-container"><div class="knapsack-base" id="mochila-base">', unsafe_allow_html=True)
            itens_selecionados_detalhes = []
            if solucao:
                for i, gene in enumerate(solucao):
                    if gene == 1:
                        item = items_obj_list[i]
                        # Renderiza cada item dentro da mochila com a classe 'visible' para anima√ß√£o
                        st.markdown(
                            f"""
                            <div class="knapsack-item visible" title="{item.name} (P:{item.weight}, V:${item.value})">
                                {item.name}<br>({item.weight}kg, ${item.value})
                            </div>
                            """, unsafe_allow_html=True
                        )
                        itens_selecionados_detalhes.append(item)
            # Fecha o container da mochila
            st.markdown('</div></div>', unsafe_allow_html=True)

            # Detalhes dos itens na mochila (fora da div da mochila visual)
            with item_details_placeholder.container():
                st.subheader("Itens Selecionados na Melhor Solu√ß√£o:")
                if itens_selecionados_detalhes:
                    for item in itens_selecionados_detalhes:
                        st.markdown(f"""
                            <div class="item-card">
                                <h5>{item.name}</h5>
                                <p>Peso: {item.weight} kg | Valor: ${item.value}</p>
                            </div>
                        """, unsafe_allow_html=True)
                else:
                    st.info("Nenhum item v√°lido selecionado ainda nesta solu√ß√£o.")


        # Atualizar gr√°fico de evolu√ß√£o do fitness
        # historico_solucoes[geracao_idx][3] √© o fitness da melhor solu√ß√£o geral at√© esta gera√ß√£o
        historico_fitness_geral_para_grafico.append(historico_solucoes[geracao_idx][3])
        # Streamlit precisa de uma estrutura de dados para o gr√°fico de linha, uma lista simples funciona.
        chart_data_placeholder.line_chart(historico_fitness_geral_para_grafico)


        time.sleep(animation_speed) # Controla a velocidade da anima√ß√£o

    st.success("Simula√ß√£o Completa! üéâ")
    st.snow() # Efeito de neve ao final

    # Exibir o resultado final novamente
    st.markdown("---")
    st.subheader("‚úÖ Melhor Solu√ß√£o Final Encontrada:")
    if historico_solucoes:
        # Pega a √∫ltima entrada do hist√≥rico, que √© a melhor solu√ß√£o final
        final_solucao, final_valor, final_peso, final_fitness = historico_solucoes[-1]
        if final_solucao:
            final_itens_selecionados_obj = [items_obj_list[i] for i, gene in enumerate(final_solucao) if gene == 1]
            final_itens_selecionados_nomes = [item.name for item in final_itens_selecionados_obj]

            st.write(f"**Cromossomo:** {final_solucao}")
            st.write(f"**Itens na Mochila:** {', '.join(final_itens_selecionados_nomes)}")
            st.write(f"**Valor Total:** ${final_valor}")
            st.write(f"**Peso Total:** {final_peso}/{capacidade_mochila} kg")
            st.write(f"**Fitness Final:** {final_fitness}")
        else:
            st.warning("Nenhuma solu√ß√£o v√°lida foi encontrada.")
    else:
        st.warning("N√£o foi poss√≠vel encontrar uma solu√ß√£o.")